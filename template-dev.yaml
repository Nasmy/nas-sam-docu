AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Docudive Backend Functions

Parameters:
  Stage:
    Type: String
    Default: dev
  Username:
    Type: String
    Default: "postgres"
    NoEcho: true
  Password:
    Type: String
    Default: "W4DWRdv8dKMmCYimKs9Z"
    NoEcho: true
  OCRImageUri:
    Type: String
    Default: "654654477985.dkr.ecr.us-east-1.amazonaws.com/nas-docudive:ocr-v1"
  InputFilesBucket:
    Type: String
    Default: "nas-docudive-input-files"
  SMTPServer:
    Type: String
    Default: "email-smtp.us-east-2.amazonaws.com"
    NoEcho: true
  SMTPPort:
    Type: Number
    Default: 587
    NoEcho: true
  SMTPUsername:
    Type: String
    Default: "AKIAWUUXCKEQ2EXHDGQS"
    NoEcho: true
  SMTPPassword:
    Type: String
    Default: "BI4QQPZfdZ0TvH6z4zVSYHGfqL+jLWoauLE2zMT9MLR8"
    NoEcho: true
  OpenApiKey:
    Type: String
    Default: "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"
    NoEcho: true


Globals:
  Function:
    Timeout: 600
    Environment:
      Variables:
        version: "1.0"
        database_endpoint: !GetAtt PostgresDBInstance.Endpoint.Address
        database_port: !GetAtt PostgresDBInstance.Endpoint.Port
        database_username: !Ref Username
        database_password: !Ref Password
        database_name: "postgres"
        database_schema: "test"

Resources:
  PostgresDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.micro"
      Engine: "postgres"
      EngineVersion: "14.6"
      MasterUsername: !Ref Username  # You should ideally use secret parameters or AWS Secrets Manager.
      MasterUserPassword: !Ref Password # DO NOT hard-code passwords in templates. Use secrets.
      PubliclyAccessible: true

#  MyEventBridgeRule:
#    Type: AWS::Events::Rule
#    Properties:
#      Description: Triggering Lambda from a custom event bus
#      EventBusName: default
#      EventPattern:
#        source:
#          - "custom.source"
#      State: "ENABLED"
#      Targets:
#        - Id: TriggerFunction
#          Arn:
#            Fn::GetAtt: [ TriggerFunction, Arn ]

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-docud-documents

  DocumentsInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-input-files
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
            AllowedHeaders:
              - "*"

  ImageProcessBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-docudive-image-process
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  PDFImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-docudive-input-images
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  FilesDigestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-files-digest-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

#  PublicS3Bucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: dd-public-files-bucket
#      AccessControl: PublicRead

  CustomObjectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-custom-object-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ChatHistoryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-chat-history-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ChatContextBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-chat-context-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  AuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthorizerLambda
      CodeUri: functions/authorizer
      Handler: handler.handler
      Runtime: python3.8

  AuthorizerLambdaRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeAuthorizerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - "lambda:InvokeFunction"
              Effect: Allow
              Resource:
                - !GetAtt AuthorizerLambda.Arn

  DocudiveApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        MaxAge: 600

      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt AuthorizerLambda.Arn
            FunctionInvokeRole: !GetAtt AuthorizerLambdaRolePolicy.Arn
            # Identity:
            #   ReauthorizeEvery: 300
              # Headers:
              #   - Authorization

  CommonLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: app-common
        ContentUri: functions/layers
        CompatibleRuntimes:
          - python3.8
        RetentionPolicy: Delete
    Metadata:
        BuildMethod: python3.8

  SQLModels:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQLModels
      CodeUri: functions/models
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/db/create
            Method: post
            ApiId: !Ref DocudiveApi

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignupFunction
      CodeUri: functions/signup
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Environment:
        Variables:
          verification_url: "https://docudive.vercel.app"
          bucket: !Ref DocumentsBucket
          smtp_server: !Ref SMTPServer
          smtp_port: !Ref SMTPPort
          smtp_username: !Ref SMTPUsername
          smtp_password: !Ref SMTPPassword
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/signup
            Method: post
            ApiId: !Ref DocudiveApi

  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VerifyFunction
      CodeUri: functions/verify
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          bucket: !Ref DocumentsBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/verify
            Method: get
            ApiId: !Ref DocudiveApi

  ResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ResetFunction
      CodeUri: functions/reset
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          verification_url: "https://docudive.vercel.app"
          bucket: !Ref DocumentsBucket
          smtp_server: !Ref SMTPServer
          smtp_port: !Ref SMTPPort
          smtp_username: !Ref SMTPUsername
          smtp_password: !Ref SMTPPassword
      Events:
        ProxyEmail:
          Type: HttpApi
          Properties:
            Path: /api/reset-email
            Method: post
            ApiId: !Ref DocudiveApi
        ProxyPass:
          Type: HttpApi
          Properties:
            Path: /api/reset-password
            Method: post
            ApiId: !Ref DocudiveApi

  SignoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignoutFunction
      CodeUri: functions/signout
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/signout
            Method: get
            ApiId: !Ref DocudiveApi

  TokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TokenFunction
      CodeUri: functions/token
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Events:
        Proxy2:
          Type: HttpApi
          Properties:
            Path: /api/signin
            Method: post
            ApiId: !Ref DocudiveApi

  GoogleSignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GoogleSignInFunction
      CodeUri: functions/google_signin
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Environment:
        Variables:
          CLIENT_ID: "739388002072-lqhmp6jbvhrvn7p40i3s27fmc41bsflh.apps.googleusercontent.com"
      Events:
        Proxy2:
          Type: HttpApi
          Properties:
            Path: /api/google-signin
            Method: post
            ApiId: !Ref DocudiveApi

  ValidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ValidateFunction
      CodeUri: functions/validate
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/validate
            Method: get
            ApiId: !Ref DocudiveApi

  UploadPreSignedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadPreSignedFunction
      CodeUri: functions/upload_presigned
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/documents
            Method: post
            ApiId: !Ref DocudiveApi
        ProxyUrl:
          Type: HttpApi
          Properties:
            Path: /api/document-url
            Method: post
            ApiId: !Ref DocudiveApi

  ListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListFunction
      CodeUri: functions/documents
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        ProxyGet:
          Type: HttpApi
          Properties:
            Path: /api/documents
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyDelete:
          Type: HttpApi
          Properties:
            Path: /api/documents
            Method: delete
            ApiId: !Ref DocudiveApi
        ProxyUpdate:
          Type: HttpApi
          Properties:
            Path: /api/documents
            Method: patch
            ApiId: !Ref DocudiveApi

  ChatListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatListFunction
      CodeUri: functions/chat_list
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy2:
          Type: HttpApi
          Properties:
            Path: /api/chats
            Method: get
            ApiId: !Ref DocudiveApi

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UsersFunction
      CodeUri: functions/user
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          bucket: 'nas-dd-public-access'
      Policies:
        - S3CrudPolicy:
            BucketName: 'nas-dd-public-access'
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/user
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyPost:
          Type: HttpApi
          Properties:
            Path: /api/user
            Method: post
            ApiId: !Ref DocudiveApi

  UsageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UsageFunction
      CodeUri: functions/usage
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/usage
            Method: get
            ApiId: !Ref DocudiveApi

  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TriggerFunction
      CodeUri: functions/triggers
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/trigger
            Method: get
            ApiId: !Ref DocudiveApi
        MyEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - custom.signin
              detail-type:
                - success

  TriggerOCRFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TriggerOCRFunction
      CodeUri: functions/trigger_ocr
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
      Environment:
        Variables:
          ocr_output_bucket: !Ref FilesDigestBucket
          predict_bucket_name: !Ref CustomObjectBucket
      Events:
        MyEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - custom.ocr
              detail-type:
                - success

  DownloadPreSignedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DownloadPreSignedFunction
      CodeUri: functions/download_presigned
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
          link_expiration_seconds: 86400
      Events:
        Proxy2:
          Type: HttpApi
          Properties:
            Path: /api/documents/{document_id}
            Method: get
            ApiId: !Ref DocudiveApi

  AnnotationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AnnotationsFunction
      CodeUri: functions/annotations
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          bucket: !Ref FilesDigestBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/annotations
            Method: get
            ApiId: !Ref DocudiveApi
        Proxy2:
          Type: HttpApi
          Properties:
              Path: /api/annotation-progress
              Method: get
              ApiId: !Ref DocudiveApi

  ChatHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatHistoryFunction
      CodeUri: functions/chat_history
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ChatHistoryBucket
        - S3CrudPolicy:
            BucketName: !Ref ChatContextBucket
      Environment:
        Variables:
          chat_history_bucket: !Ref ChatHistoryBucket
          chat_context_bucket: !Ref ChatContextBucket
      Events:
        ProxyGet:
          Type: HttpApi
          Properties:
            Path: /api/chat-history
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyDelete:
          Type: HttpApi
          Properties:
            Path: /api/chat-history
            Method: delete
            ApiId: !Ref DocudiveApi

  StripeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: StripeFunction
      CodeUri: functions/stripe
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          STRIPE_SECRET_KEY: "sk_test_51O21ZuEIx0QzrdrDkRpaZAixfOxeamUkUp18LW2IxRorplnTTjC2Fd7lMZHwqBVNMKkl3pV6cPFR4Wuq4KGS34Fm003470GztC"
      Events:
        ProxyPMGet:
          Type: HttpApi
          Properties:
            Path: /api/payment-methods
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyPMPost:
          Type: HttpApi
          Properties:
            Path: /api/payment-methods
            Method: post
            ApiId: !Ref DocudiveApi
        ProxyPMPatch:
          Type: HttpApi
          Properties:
            Path: /api/payment-methods
            Method: patch
            ApiId: !Ref DocudiveApi
        ProxyPMDelete:
          Type: HttpApi
          Properties:
            Path: /api/payment-methods
            Method: delete
            ApiId: !Ref DocudiveApi
        ProxyInvGet:
          Type: HttpApi
          Properties:
            Path: /api/invoices
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyBillGet:
          Type: HttpApi
          Properties:
            Path: /api/billing
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyBillPut:
          Type: HttpApi
          Properties:
            Path: /api/billing
            Method: put
            ApiId: !Ref DocudiveApi
        ProxySubGet:
          Type: HttpApi
          Properties:
            Path: /api/subscriptions
            Method: get
            ApiId: !Ref DocudiveApi
        ProxySubPost:
          Type: HttpApi
          Properties:
            Path: /api/subscriptions
            Method: post
            ApiId: !Ref DocudiveApi
        ProxySubGetList:
          Type: HttpApi
          Properties:
            Path: /api/subscription-list
            Method: get
            ApiId: !Ref DocudiveApi

  OCRFunction:
    Type: AWS::Serverless::Function
    DependsOn: PDFImageBucket
    Properties:
      FunctionName: OCRFunction
      PackageType: Image
      MemorySize: 512
      ImageConfig:
        Command: ["handler.handler"]
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: default
        - S3CrudPolicy:
            BucketName: !Ref PDFImageBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
      Environment:
        Variables:
          images_bucket: !Ref PDFImageBucket
          ocr_output_bucket: !Ref FilesDigestBucket
          predict_bucket_name: !Ref CustomObjectBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref PDFImageBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/ocr
      DockerTag: v1

  NERFunction:
    Type: AWS::Serverless::Function
    DependsOn: PDFImageBucket
    Properties:
      FunctionName: NERFunction
      PackageType: Image
      MemorySize: 1024
      ImageConfig:
        Command: ["handler.handler"]
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/prompts_ner
      DockerTag: v1

  ScrapeFunction:
    Type: AWS::Serverless::Function
    DependsOn: DocumentsInputBucket
    Properties:
      FunctionName: ScrapeFunction
      CodeUri: functions/scrape
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 512
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref PDFImageBucket
        - S3CrudPolicy:
            BucketName: !Ref ImageProcessBucket
      Environment:
        Variables:
          input_bucket: !Ref DocumentsInputBucket
          predict_bucket_name: !Ref CustomObjectBucket
          scrape_output_bucket: !Ref FilesDigestBucket
          image_output_bucket: !Ref PDFImageBucket
          image_process_bucket: !Ref ImageProcessBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref DocumentsInputBucket

  PromptQuestionsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptQuestionsFunction
      CodeUri: functions/prompts_questions
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptCitationsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptCitationsFunction
      CodeUri: functions/prompts_citations
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract the citations if exists in the context. If citations do not exist, then please provide the answer as \"no answer\". Make sure in your answer you only include the citations and not any other summarised answer. Form your answer in the following json format. Each json node should include one citation information only:\n\n{\n"citation_n": {\n"document": "document_term",\n"section": "section_text"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptCustomFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptCustomFunction
      CodeUri: functions/prompts_custom
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'What is the main idea of the text?'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptCitedExamplesFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptCitedExamplesFunction
      CodeUri: functions/prompts_cited_examples
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract the cited examples if exists in the context. If example does not exist, then please provide the answer as \"no answer\". Make sure in your answer you only include the example and not any other summarised answer. Form your answer in the following json format. Each json node should include one example information only:\n\n{\n"example_n": {\n"term": "example_term",\n"example": "example_text"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptTopicsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptTopicsFunction
      CodeUri: functions/prompts_topics
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract n topics from the context. provide topic with a short description in maximum 3 lines. Each topic name should be of maximum of 3 word phrase. Suggest the topic text except “introduction” and “conclusion”. Make sure in your answer you only include the topics and not any other summarised answer. Form your answer in the following json format. Each json node should include one topic information only:\n\n{\n"topic_n": {\n"topic": "topic_term",\n"description": "description_text"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptLegalFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptLegalFunction
      CodeUri: functions/prompts_legal_info
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract the following items from the given context \nAuthor Information\nContent Quality and Originality\nWriting Style and Clarity\nConsistency and Coherence\nTitle and Metadata\nPeer Review Feedback. If any of the items does not exist, then please provide the answer as \"Information does not exist\". Make sure in your answer you only include the items and not any other summarised answer. Form your answer in the following json format. Each json string should be in markup language. Each json node should include one example information only:\n\n{\n"item_name": {\n"item": "term_text",\n"term_description": "term_description"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptEducationalFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptEducationalFunction
      CodeUri: functions/prompts_educational_info
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract the following items from the given context Methodology\nConclusion and Findings\nHistorical and Cultural Context. If any of the items does not exist, then please provide the answer as \"Information does not exist\". Make sure in your answer you only include the items and not any other summarised answer. Form your answer in the following json format. Each json string should be in markup language. Each json node should include one example information only:\n\n{\n"item_name": {\n"item": "term_text",\n"term_description": "term_description"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptFinancialFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptFinancialFunction
      CodeUri: functions/prompts_financial_info
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract the following items from the given context \nAssets and Liabilities\nIncome and Employment Information\n Risk Factors\n Market and Economic Indicators\n Tax Information\n Transaction Details. If any of the items does not exist, then please provide the answer as \"Information does not exist\". Make sure in your answer you only include the items and not any other summarised answer. Form your answer in the following json format. Each json string should be in markup language. Each json node should include one example information only:\n\n{\n"item_name": {\n"item": "term_text",\n"term_description": "term_description"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptEditorialFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptEditorialFunction
      CodeUri: functions/prompts_editorial_info
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract the following items from the given context \nAuthor Information\nContent Quality and Originality\nWriting Style and Clarity\nConsistency and Coherence\nTitle and Metadata\nPeer Review Feedback. If any of the items does not exist, then please provide the answer as \"Information does not exist\". Make sure in your answer you only include the items and not any other summarised answer. Form your answer in the following json format. Each json string should be in markup language. Each json node should include one example information only:\n\n{\n"item_name": {\n"item": "term_text",\n"term_description": "term_description"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptInfoSnippetsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptInfoSnippetsFunction
      CodeUri: functions/prompts_info_snippets
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptHeadingsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptHeadingsFunction
      CodeUri: functions/prompts_headings
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptSummaryFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptSummaryFunction
      CodeUri: functions/prompts_summary
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptTimelineFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptTimelineFunction
      CodeUri: functions/prompts_timeline
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          QUESTION: 'Extract a timeline if exists in the context. If a timeline does not exist, then please provide the answer as  "no timeline". Make sure in your answer you only include the timeline and not any other summarised answer.  Form your answer in the following json format. Each json node should include one timeline information only: \n\n{\n"timeline_n": {\n "time": "time element",\n "summary": "Summary text"\n},\n...\n}'
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  TextExtractFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: TextExtractFunction
      CodeUri: functions/text_extract
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatFunction
      CodeUri: functions/chat
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ChatHistoryBucket
        - S3CrudPolicy:
            BucketName: !Ref ChatContextBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          image_bucket: !Ref DocumentsInputBucket
          files_digest_bucket: !Ref FilesDigestBucket
          chat_context_bucket: !Ref ChatContextBucket
          chat_history_bucket: !Ref ChatHistoryBucket
      Events:
        Proxy2:
          Type: HttpApi
          Properties:
            Path: /api/chats
            Method: post
            ApiId: !Ref DocudiveApi

Outputs:
  DocudiveEndpoint:
    Value: !Sub "https://${DocudiveApi}.execute-api.${AWS::Region}.amazonaws.com"

  DatabaseEndpoint:
    Description: "The endpoint address of the PostgreSQL RDS instance."
    Value: !GetAtt PostgresDBInstance.Endpoint.Address