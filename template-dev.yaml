AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Docudive Backend Functions

Parameters:
  Stage:
    Type: String
    Default: dev
  Username:
    Type: String
    Default: "postgres"
    NoEcho: true
  Password:
    Type: String
    Default: "W4DWRdv8dKMmCYimKs9Z"
    NoEcho: true
  OCRImageUri:
    Type: String
    Default: "654654477985.dkr.ecr.us-east-1.amazonaws.com/nas-docudive:ocr-v1"
  InputFilesBucket:
    Type: String
    Default: "nas-docudive-input-files"
  SMTPServer:
    Type: String
    Default: "email-smtp.us-east-2.amazonaws.com"
    NoEcho: true
  SMTPPort:
    Type: Number
    Default: 587
    NoEcho: true
  SMTPUsername:
    Type: String
    Default: "AKIAWUUXCKEQ2EXHDGQS"
    NoEcho: true
  SMTPPassword:
    Type: String
    Default: "BI4QQPZfdZ0TvH6z4zVSYHGfqL+jLWoauLE2zMT9MLR8"
    NoEcho: true
  OpenApiKey:
    Type: String
    Default: "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"
    NoEcho: true


Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        version: "1.0"
        database_endpoint: !GetAtt PostgresDBInstance.Endpoint.Address
        database_port: !GetAtt PostgresDBInstance.Endpoint.Port
        database_username: !Ref Username
        database_password: !Ref Password
        database_name: "postgres"

Resources:
  PostgresDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.micro"
      Engine: "postgres"
      EngineVersion: "14.6"
      MasterUsername: !Ref Username  # You should ideally use secret parameters or AWS Secrets Manager.
      MasterUserPassword: !Ref Password # DO NOT hard-code passwords in templates. Use secrets.
      PubliclyAccessible: true

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-docud-documents

  DocumentsInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-input-files
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
            AllowedHeaders:
              - "*"

  PDFImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-docudive-input-images
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  FilesDigestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-files-digest-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  CustomObjectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-custom-object-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ChatHistoryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-chat-history-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ChatContextBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: nas-dd-chat-context-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  AuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthorizerLambda
      CodeUri: functions/authorizer
      Handler: handler.handler
      Runtime: python3.8

  AuthorizerLambdaRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeAuthorizerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
                - "lambda:InvokeFunction"
              Effect: Allow
              Resource:
                - !GetAtt AuthorizerLambda.Arn

  DocudiveApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        MaxAge: 600

      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt AuthorizerLambda.Arn
            FunctionInvokeRole: !GetAtt AuthorizerLambdaRolePolicy.Arn
            # Identity:
            #   ReauthorizeEvery: 300
              # Headers:
              #   - Authorization

  CommonLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: app-common
        ContentUri: functions/layers
        CompatibleRuntimes:
          - python3.8
        RetentionPolicy: Delete
    Metadata:
        BuildMethod: python3.8

  SQLModels:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQLModels
      CodeUri: functions/models
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/db/create
            Method: post
            ApiId: !Ref DocudiveApi

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignupFunction
      CodeUri: functions/signup
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Environment:
        Variables:
          verification_url: "https://11g21recbe.execute-api.us-east-2.amazonaws.com/dev"
          bucket: !Ref DocumentsBucket
          smtp_server: !Ref SMTPServer
          smtp_port: !Ref SMTPPort
          smtp_username: !Ref SMTPUsername
          smtp_password: !Ref SMTPPassword
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/signup
            Method: post
            ApiId: !Ref DocudiveApi

  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VerifyFunction
      CodeUri: functions/verify
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          bucket: !Ref DocumentsBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/verify
            Method: get
            ApiId: !Ref DocudiveApi

  SignoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignoutFunction
      CodeUri: functions/signout
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/signout
            Method: get
            ApiId: !Ref DocudiveApi

  TokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TokenFunction
      CodeUri: functions/token
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/token
            Method: post
            ApiId: !Ref DocudiveApi

  GoogleSignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GoogleSignInFunction
      CodeUri: functions/google_signin
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          CLIENT_ID: "739388002072-lqhmp6jbvhrvn7p40i3s27fmc41bsflh.apps.googleusercontent.com"
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/google_signin
            Method: post
            ApiId: !Ref DocudiveApi

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadFunction
      CodeUri: functions/upload_binary
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/upload-binary
            Method: post
            ApiId: !Ref DocudiveApi

  UploadMultipartFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadMultipartFunction
      CodeUri: functions/upload_multipart
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/upload-multipart
            Method: post
            ApiId: !Ref DocudiveApi

  UploadPreSignedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadPreSignedFunction
      CodeUri: functions/upload_presigned
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/upload-presigned
            Method: post
            ApiId: !Ref DocudiveApi

  ListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListFunction
      CodeUri: functions/list
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/doc-list
            Method: get
            ApiId: !Ref DocudiveApi

  ChatListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatListFunction
      CodeUri: functions/chat_list
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/chat-list
            Method: get
            ApiId: !Ref DocudiveApi

  UsersFunctionUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UsersFunction
      CodeUri: functions/user
      Handler: handler.handler
      Runtime: python3.10
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/user
            Method: get
            ApiId: !Ref DocudiveApi

  UsageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UsageFunction
      CodeUri: functions/usage
      Handler: handler.handler
      Runtime: python3.10
      Layers:
        - !Ref CommonLambdaLayer
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/usage
            Method: get
            ApiId: !Ref DocudiveApi

  DownloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DownloadFunction
      CodeUri: functions/download
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/download
            Method: get
            ApiId: !Ref DocudiveApi

  DownloadPreSignedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DownloadPreSignedFunction
      CodeUri: functions/download_presigned
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
      Environment:
        Variables:
          bucket: !Ref DocumentsInputBucket
          link_expiration_seconds: 86400
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/download-presigned
            Method: get
            ApiId: !Ref DocudiveApi

  AnnotationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AnnotationsFunction
      CodeUri: functions/annotations
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          bucket: !Ref FilesDigestBucket
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/annotations
            Method: get
            ApiId: !Ref DocudiveApi

  ChatHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatHistoryFunction
      CodeUri: functions/chat_history
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ChatHistoryBucket
        - S3CrudPolicy:
            BucketName: !Ref ChatContextBucket
      Environment:
        Variables:
          chat_history_bucket: !Ref ChatHistoryBucket
          chat_context_bucket: !Ref ChatContextBucket
      Events:
        ProxyGet:
          Type: HttpApi
          Properties:
            Path: /api/chat-history
            Method: get
            ApiId: !Ref DocudiveApi
        ProxyDelete:
          Type: HttpApi
          Properties:
            Path: /api/chat-history
            Method: delete
            ApiId: !Ref DocudiveApi

  OCRFunction:
    Type: AWS::Serverless::Function
    DependsOn: PDFImageBucket
    Properties:
      FunctionName: OCRFunction
      PackageType: Image
      Timeout: 120
      MemorySize: 512
      ImageConfig:
        Command: ["handler.handler"]
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PDFImageBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
      Environment:
        Variables:
          images_bucket: !Ref PDFImageBucket
          ocr_output_bucket: !Ref FilesDigestBucket
          predict_bucket_name: !Ref CustomObjectBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref PDFImageBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/ocr
      DockerTag: v1

  NERFunction:
    Type: AWS::Serverless::Function
    DependsOn: PDFImageBucket
    Properties:
      FunctionName: NERFunction
      PackageType: Image
      Timeout: 120
      MemorySize: 1024
      ImageConfig:
        Command: ["handler.handler"]
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/prompts_ner
      DockerTag: v1

  ScrapeFunction:
    Type: AWS::Serverless::Function
    DependsOn: DocumentsInputBucket
    Properties:
      FunctionName: ScrapeFunction
      CodeUri: functions/scrape
      Handler: handler.handler
      Runtime: python3.11
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsInputBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref PDFImageBucket
      Environment:
        Variables:
          input_bucket: !Ref DocumentsInputBucket
          predict_bucket_name: !Ref CustomObjectBucket
          scrape_output_bucket: !Ref FilesDigestBucket
          image_output_bucket: !Ref PDFImageBucket
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref DocumentsInputBucket

  PromptQuestionsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptQuestionsFunction
      CodeUri: functions/prompts_questions
      Handler: handler.handler
      Runtime: python3.10
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          openai_api_key: !Ref OpenApiKey
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptHeadingsFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptHeadingsFunction
      CodeUri: functions/prompts_headings
      Handler: handler.handler
      Runtime: python3.10
      Timeout: 120
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          openai_api_key: !Ref OpenApiKey
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptSummaryFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptSummaryFunction
      CodeUri: functions/prompts_summary
      Handler: handler.handler
      Runtime: python3.10
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          openai_api_key: !Ref OpenApiKey
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  PromptTimelineFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: PromptTimelineFunction
      CodeUri: functions/prompts_timeline
      Handler: handler.handler
      Runtime: python3.10
      Timeout: 120
      MemorySize: 256
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          openai_api_key: !Ref OpenApiKey
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  TextExtractFunction:
    Type: AWS::Serverless::Function
    DependsOn: CustomObjectBucket
    Properties:
      FunctionName: TextExtractFunction
      CodeUri: functions/text_extract
      Handler: handler.handler
      Runtime: python3.10
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref CustomObjectBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          predict_bucket_name: !Ref CustomObjectBucket
          output_bucket: !Ref FilesDigestBucket
          openai_api_key: !Ref OpenApiKey
      Events:
        S3EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref CustomObjectBucket

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChatFunction
      CodeUri: functions/chat
      Handler: handler.handler
      Runtime: python3.8
      Layers:
        - !Ref CommonLambdaLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ChatHistoryBucket
        - S3CrudPolicy:
            BucketName: !Ref ChatContextBucket
        - S3CrudPolicy:
            BucketName: !Ref FilesDigestBucket
      Environment:
        Variables:
          files_digest_bucket: !Ref FilesDigestBucket
          chat_context_bucket: !Ref ChatContextBucket
          chat_history_bucket: !Ref ChatHistoryBucket
          openai_api_key: !Ref OpenApiKey
      Events:
        Proxy:
          Type: HttpApi
          Properties:
            Path: /api/chat
            Method: post
            ApiId: !Ref DocudiveApi

Outputs:
  DocudiveEndpoint:
    Value: !Sub "https://${DocudiveApi}.execute-api.${AWS::Region}.amazonaws.com"

  DatabaseEndpoint:
    Description: "The endpoint address of the PostgreSQL RDS instance."
    Value: !GetAtt PostgresDBInstance.Endpoint.Address